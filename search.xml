<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>修改手机开机Logo界面</title>
      <link href="/post/f8f48ab9/"/>
      <url>/post/f8f48ab9/</url>
      
        <content type="html"><![CDATA[<h1 id="修改小米手机开机logo界面"><a class="markdownIt-Anchor" href="#修改小米手机开机logo界面"></a> 修改小米手机开机Logo界面</h1><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><h3 id="准备工具"><a class="markdownIt-Anchor" href="#准备工具"></a> 准备工具:</h3><ul><li><a href="//github.com/ReFirmLabs/binwalk" target="_blank" rel="noopener">binwalk</a> 用于分析img镜像, 若不需要分析可忽略</li><li><a href="//github.com/frg2089/Splash.Patcher" target="_blank" rel="noopener">Splash.Patcher</a> img镜像修补工具</li></ul><h3 id="软件运行环境"><a class="markdownIt-Anchor" href="#软件运行环境"></a> 软件运行环境:</h3><ul><li><a href="//www.python.org/" target="_blank" rel="noopener">Python</a>(<a href="//github.com/ReFirmLabs/binwalk" target="_blank" rel="noopener">binwalk</a>推荐使用python3, 若不使用<a href="//github.com/ReFirmLabs/binwalk" target="_blank" rel="noopener">binwalk</a>可不配置)</li><li><a href="//dotnet.microsoft.com/" target="_blank" rel="noopener">.Net</a>(<a href="//github.com/frg2089/Splash.Patcher" target="_blank" rel="noopener">Splash.Patcher</a>工具运行环境, 程序源代码可移植到任何 .Net 环境上)</li></ul><h3 id="准备splashimg"><a class="markdownIt-Anchor" href="#准备splashimg"></a> 准备splash.img</h3><p>根据厂商不同, 这个文件也可能会叫做logo.img</p><p>这个文件可以从完整的系统更新包中取得<br />也可以直接用dd或nanddump工具取得</p><h3 id="获取原始图片"><a class="markdownIt-Anchor" href="#获取原始图片"></a> 获取原始图片</h3><p>使用<a href="//github.com/ReFirmLabs/binwalk" target="_blank" rel="noopener">binwalk</a>工具获取图片的偏移值<br />如果你知道图片的偏移位置的话 这个步骤可以跳过</p><ol start="0"><li><p>使用binwalk工具解析splash.img</p><pre class="highlight"><code class="bash">binwalk --dd=<span class="hljs-string">'.*'</span> splash.img</code></pre><p><img src="//github.com/frg2089/Splash.Patcher/raw/master/docs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-11-25%20154749.png" alt="运行结果" /></p></li><li><p>取出所有bmp文件</p><ol><li><p>进入&quot;_splash.img.extracted&quot;目录, 将步骤0中’DESCRIPTION’为’PC bitmap, Windows 3.x format’的’HEXADECIMAL’值相等的文件添加.bmp扩展名<br /><img src="//github.com/frg2089/Splash.Patcher/raw/master/docs/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt="重命名" /></p></li><li><p>移除非.bmp扩展名的文件</p><pre class="highlight"><code class="powershell"><span class="hljs-variable">$fs</span> = ls;<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$f</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$fs</span>){    <span class="hljs-keyword">if</span>(<span class="hljs-operator">-not</span> <span class="hljs-variable">$f</span>.Extension.Equals(<span class="hljs-string">".bmp"</span>,[<span class="hljs-type">System.StringComparison</span>]::OrdinalIgnoreCase)){        <span class="hljs-variable">$f</span>.Delete();    }}</code></pre><p><img src="//github.com/frg2089/Splash.Patcher/raw/master/docs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-11-25%20154749.png" alt="删掉无关文件" /></p></li></ol></li></ol><h3 id="准备替换图片"><a class="markdownIt-Anchor" href="#准备替换图片"></a> 准备替换图片</h3><p><strong>注意</strong>: 请确保准备要替换的图片大小与格式与原始图片一致<br />bitmap(bmp)图片只要图像大小一致的话文件大小也会一致</p><p><a href="//github.com/frg2089/Splash.Patcher" target="_blank" rel="noopener">Splash.Patcher</a>程序是修补工具, 不需要替换的图片可以不随镜像放在一起 不会影响修补结果</p><h2 id="修补文件"><a class="markdownIt-Anchor" href="#修补文件"></a> 修补文件</h2><ol start="0"><li>将图片和splash.img文件放在同一目录下</li><li>在目录下执行工具或将目录作为参数传递<br /><img src="//github.com/frg2089/Splash.Patcher/raw/master/docs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202020-11-25%20160416.png" alt="运行截图" /></li></ol><h2 id="写入"><a class="markdownIt-Anchor" href="#写入"></a> 写入</h2><p>把修补后的splash_new.img刷入即可</p><pre class="highlight"><code class="cmd"># 重启进入fastbootadb reboot fastboot# 刷入新的splashfastboot flash splash splash_new.img# 重启进入系统fastboot reboot</code></pre><hr /><h1 id="关于splashpatcher"><a class="markdownIt-Anchor" href="#关于splashpatcher"></a> 关于<a href="//github.com/frg2089/Splash.Patcher" target="_blank" rel="noopener">Splash.Patcher</a></h1><p><a href="//github.com/frg2089/Splash.Patcher" target="_blank" rel="noopener">Splash.Patcher</a>是我想改开机logo但是找不到工具之后自己写出来的…</p><p>至于为什么不用<a href="//github.com/moonheart/sagit-logo-gen" target="_blank" rel="noopener">sagit-logo-gen</a>…是因为…</p><blockquote><p>我不会用<br />我那时候不知道logo.img是什么东西<br />我没有那种东西<br />我把用这个工具直接生成的logo_new.img文件刷到splash分区之后就不显示logo了<br />试图把img刷到logo分区可fastboot工具提示我没有logo分区…<br />看了下源代码发现我可能要改源代码来编译生成一个适配自己手机的程序…<br />好麻烦…<br />不想用…</p></blockquote><p>那只能自己写了嘛…</p><p>虽然好像这样更麻烦了</p><p>为什么项目仓库名写的是Splash.Patcher但程序叫Splash.Generator?<br />那个是我当时创建项目的时候起错名字了…不影响使用的</p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> .Net 5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> MIUI </tag>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WPF 捕获系统主题改变</title>
      <link href="/post/3867e2db/"/>
      <url>/post/3867e2db/</url>
      
        <content type="html"><![CDATA[<p>Language Version: C# 8.0</p><h1 id="wpf-捕获系统主题改变"><a class="markdownIt-Anchor" href="#wpf-捕获系统主题改变"></a> WPF 捕获系统主题改变</h1><p>通过System.Windows.Interop</p><pre class="highlight"><code class="cs"><span class="hljs-keyword">using</span> System.Windows.Interop;<span class="hljs-comment">// this is Window 可以写在构造方法里</span>    <span class="hljs-keyword">this</span>.SourceInitialized += Theme.ThemeManager.Window_SourceInitialized;<span class="hljs-comment">// see "https://stackoverflow.com/questions/13660976/get-the-active-color-of-windows-8-automatic-color-theme"</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Window_SourceInitialized</span>(<span class="hljs-params"><span class="hljs-keyword">object</span> sender, EventArgs e</span>)</span>{    IntPtr hwnd;    <span class="hljs-keyword">if</span> ((hwnd = <span class="hljs-keyword">new</span> WindowInteropHelper(sender <span class="hljs-keyword">as</span> Window).Handle) == IntPtr.Zero)        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidOperationException(<span class="hljs-string">"Could not get window handle."</span>);    HwndSource.FromHwnd(hwnd).AddHook(WndProc);}<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> WM_DWMCOLORIZATIONCOLORCHANGED = <span class="hljs-number">0x320</span>;<span class="hljs-comment">// see "https://stackoverflow.com/questions/13660976/get-the-active-color-of-windows-8-automatic-color-theme"</span><span class="hljs-function">IntPtr <span class="hljs-title">WndProc</span>(<span class="hljs-params">IntPtr hwnd, <span class="hljs-keyword">int</span> msg, IntPtr wParam, IntPtr lParam, <span class="hljs-keyword">ref</span> <span class="hljs-keyword">bool</span> handled</span>)</span>{    <span class="hljs-keyword">switch</span> (msg)    {        <span class="hljs-keyword">case</span> WM_DWMCOLORIZATIONCOLORCHANGED:            <span class="hljs-comment">/*              * Update gradient brushes with new color information from             * NativeMethods.DwmGetColorizationParams() or the registry.             */</span>            <span class="hljs-keyword">return</span> IntPtr.Zero;        <span class="hljs-keyword">default</span>:            <span class="hljs-keyword">return</span> IntPtr.Zero;    }}</code></pre><p>这个也可以捕获系统颜色主题改变 也是WM_DWMCOLORIZATIONCOLORCHANGED</p><ul><li><a href="https://stackoverflow.com/questions/13660976/get-the-active-color-of-windows-8-automatic-color-theme" target="_blank" rel="noopener">Get the active color of Windows 8 automatic color theme - Stack Overflow</a></li><li><a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms633573(v=vs.85)" target="_blank" rel="noopener">WindowProc callback function - MSDN</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/dwm/wm-dwmcolorizationcolorchanged" target="_blank" rel="noopener">WM_DWMCOLORIZATIONCOLORCHANGED - MSDN</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> .Net Core </category>
          
          <category> WPF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .Net Core </tag>
            
            <tag> WPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 获取操作系统的主题强调色和颜色主题的方法</title>
      <link href="/post/29ea410b/"/>
      <url>/post/29ea410b/</url>
      
        <content type="html"><![CDATA[<p>Language Version: C# 8.0</p><h1 id="系统强调色"><a class="markdownIt-Anchor" href="#系统强调色"></a> 系统强调色</h1><p>通过调用API即可实现</p><pre class="highlight"><code class="cs"><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<span class="hljs-comment">// See "https://docs.microsoft.com/en-us/windows/win32/api/dwmapi/nf-dwmapi-dwmgetcolorizationcolor"</span>[<span class="hljs-meta">DllImport(<span class="hljs-meta-string">"dwmapi.dll"</span>, PreserveSig = false)</span>]<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DwmGetColorizationColor</span>(<span class="hljs-params"><span class="hljs-keyword">out</span> <span class="hljs-keyword">int</span> pcrColorization, <span class="hljs-keyword">out</span> <span class="hljs-keyword">bool</span> pfOpaqueBlend</span>)</span>;</code></pre><p>System.Drawing.Color</p><pre class="highlight"><code class="cs"><span class="hljs-keyword">using</span> System.Drawing;Color SystemAccentColor{    <span class="hljs-keyword">get</span>    {        DwmGetColorizationColor(<span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pcrColorization, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pfOpaqueBlend);        <span class="hljs-keyword">return</span> Color.FromArgb(            alpha: (<span class="hljs-keyword">byte</span>)(pfOpaqueBlend ? <span class="hljs-number">255</span> : pcrColorization &gt;&gt; <span class="hljs-number">24</span>),            red:   (<span class="hljs-keyword">byte</span>)(pcrColorization &gt;&gt; <span class="hljs-number">16</span>),            green: (<span class="hljs-keyword">byte</span>)(pcrColorization &gt;&gt; <span class="hljs-number">8</span>),            blue:  (<span class="hljs-keyword">byte</span>)(pcrColorization));    }}</code></pre><p>System.Windows.Media.Color</p><pre class="highlight"><code class="cs"><span class="hljs-keyword">using</span> System.Windows.Media;Color SystemAccentColor{    <span class="hljs-keyword">get</span>    {        DwmGetColorizationColor(<span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pcrColorization, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> pfOpaqueBlend);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Color()        {            A = (<span class="hljs-keyword">byte</span>)(pfOpaqueBlend ? <span class="hljs-number">255</span> : pcrColorization &gt;&gt; <span class="hljs-number">24</span>),            R = (<span class="hljs-keyword">byte</span>)(pcrColorization &gt;&gt; <span class="hljs-number">16</span>),            G = (<span class="hljs-keyword">byte</span>)(pcrColorization &gt;&gt; <span class="hljs-number">8</span>),            B = (<span class="hljs-keyword">byte</span>)(pcrColorization)        };    }}</code></pre><ul><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/dwmapi/" target="_blank" rel="noopener">dwmapi.dll</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/uxtheme/" target="_blank" rel="noopener">uxtheme.dll</a></li></ul><h1 id="颜色模式"><a class="markdownIt-Anchor" href="#颜色模式"></a> 颜色模式</h1><p>通过访问注册表实现</p><pre class="highlight"><code class="cs"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><span class="hljs-comment"><span class="hljs-doctag">///</span> true 则 浅色 否则为false </span><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><span class="hljs-keyword">bool</span> SystemUseLightTheme{    <span class="hljs-keyword">get</span>    {        <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> RegistryKeyPath = <span class="hljs-string">@"Software\Microsoft\Windows\CurrentVersion\Themes\Personalize"</span>;        <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> RegistryValueName = <span class="hljs-string">"AppsUseLightTheme"</span>;        <span class="hljs-keyword">object</span> result;            <span class="hljs-comment">// see "https://www.addictivetips.com/windows-tips/how-to-enable-the-dark-theme-in-windows-10/"</span>        <span class="hljs-keyword">if</span> ((result = Registry.CurrentUser.OpenSubKey(RegistryKeyPath)?.GetValue(RegistryValueName)) <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span>)            result = Registry.LocalMachine.OpenSubKey(RegistryKeyPath)?.GetValue(RegistryValueName);        <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">is</span> <span class="hljs-keyword">int</span> AppsUseLightTheme)            <span class="hljs-keyword">return</span> AppsUseLightTheme &gt; <span class="hljs-number">0</span>;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    }}</code></pre><ul><li><a href="https://superuser.com/questions/1245923/registry-keys-to-change-personalization-settings" target="_blank" rel="noopener">更多个性化项</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
          <category> .Net Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .Net Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我在一边鸽子一边做CSF编辑器这件事</title>
      <link href="/post/227935cb/"/>
      <url>/post/227935cb/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>这里说的CSF文件指的是命令与征服系列用来存放字符串资源的文件<br />这里的代码默认情况下都是C#语言的<br />其实 我一共写过3个CSF编辑器 后来…都在还没开发完就弃坑了!</p><p><strong>C#的Char是占两字节的</strong><br /><strong>unsafe指这段代码不受GC管理</strong></p><h1 id="文件结构"><a class="markdownIt-Anchor" href="#文件结构"></a> 文件结构</h1><p><strong>不安全警告</strong><br />文件结构参考Modenc[1] 感谢miRoox的翻译[2]<br />CSF文件的结构其实很简单</p><pre class="highlight"><code class="cs">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 表示CSF文件的结构</span>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">struct</span> CsfFile    {        <span class="hljs-keyword">public</span> CsfHead Head;<span class="hljs-comment">// 文件头部信息</span>        <span class="hljs-keyword">public</span> CsfLabel* Body;<span class="hljs-comment">// 文件主体内容</span>    }</code></pre><h2 id="文件头"><a class="markdownIt-Anchor" href="#文件头"></a> 文件头</h2><pre class="highlight"><code class="cs">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 表示CSF文件头的结构</span>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">struct</span> CsfHead    {        <span class="hljs-keyword">public</span> <span class="hljs-keyword">fixed</span> <span class="hljs-keyword">char</span> Flag[<span class="hljs-number">4</span>];<span class="hljs-comment">// 是ASCII字符串 始终为0x20 46 53 43 即为" FSC" 确定这是一个CSF文件 否则游戏不会读取这个文件</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Version;<span class="hljs-comment">// 文件版本 通常为3</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> LabelCount;<span class="hljs-comment">// 标签总数 这个CSF文件含有的标签总数</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> ValueCount;<span class="hljs-comment">// 字符串总数 同上 CSF文件可以一个标签后面接多个字符串(不过没什么用)</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">fixed</span> <span class="hljs-keyword">byte</span> Unknown[<span class="hljs-number">4</span>];<span class="hljs-comment">// 用途不明的4个字节</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Language;<span class="hljs-comment">// 文件的语言信息</span>    }</code></pre><h3 id="文件语言"><a class="markdownIt-Anchor" href="#文件语言"></a> 文件语言</h3><h2 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h2><pre class="highlight"><code class="cs">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 表示CSF标签的结构</span>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">struct</span> CsfLabel    {        <span class="hljs-keyword">public</span> <span class="hljs-keyword">fixed</span> <span class="hljs-keyword">byte</span> Flag[<span class="hljs-number">4</span>];<span class="hljs-comment">// 是ASCII字符串 始终是" LBL" 表示这是一个标签</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Count;<span class="hljs-comment">// 这个标签一共包括多少个字符串值</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> NameLength;<span class="hljs-comment">// 这个标签的名字长度</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>* Name;<span class="hljs-comment">// 是ASCII字符串 这个标签的名字</span>        <span class="hljs-keyword">public</span> CsfValue* Values;<span class="hljs-comment">// CSF字符串结构</span>    }</code></pre><h2 id="字符串结构"><a class="markdownIt-Anchor" href="#字符串结构"></a> 字符串结构</h2><pre class="highlight"><code class="cs">    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 表示CSF字符串的结构</span>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">struct</span> CsfValue    {        <span class="hljs-keyword">public</span> <span class="hljs-keyword">fixed</span> <span class="hljs-keyword">byte</span> Flag[<span class="hljs-number">4</span>];<span class="hljs-comment">// 是ASCII字符串 共有两种值" RTS"和"WRTS"</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Length;<span class="hljs-comment">// 表示字符串数量 因为Unicode是两字节长度所以要左移一位使用</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">char</span>* Content;<span class="hljs-comment">// 是经过按位取反的Unicode字符串</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>? ExtraLength; <span class="hljs-comment">// 额外内容长度 仅在Flag为"WRTS"时可用</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>* ExtraContent;<span class="hljs-comment">// 是ASCII字符串 额外内容</span>    }</code></pre><h3 id="还原字符串"><a class="markdownIt-Anchor" href="#还原字符串"></a> 还原字符串</h3><pre class="highlight"><code class="cs">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] <span class="hljs-title">Decoding</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> ValueLength, <span class="hljs-keyword">void</span>* ValueData</span>)</span>    {        <span class="hljs-keyword">int</span> ValueDataLength = ValueLength &lt;&lt; <span class="hljs-number">1</span>;        <span class="hljs-keyword">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[ValueDataLength];        Marshal.Copy(<span class="hljs-keyword">new</span> IntPtr(ValueData), data, <span class="hljs-number">0</span>, ValueDataLength);        <span class="hljs-keyword">return</span> Decoding(data);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] <span class="hljs-title">Decoding</span>(<span class="hljs-params"><span class="hljs-keyword">byte</span>[] ValueData</span>)</span> =&gt; ValueData.Select(i =&gt; (<span class="hljs-keyword">byte</span>)~i).ToArray();</code></pre><h2 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h2><p>如果你是直接复制粘贴的我上面的代码的话 那你可以直接删掉了 这个写出来用会有严重的性能问题的<br />结构可是值类型 赋值的时候是传值不是传引用<br />这里使用结构是为了更直观的展示文件结构<br />啊? 指针不直观? 用IntPtr更不直观</p><hr /><ul><li>[<sup>1</sup>]<a href="http://modenc.renegadeprojects.com/CSF_File_Format" target="_blank" rel="noopener">Modenc</a></li><li>[<sup>2</sup>]<a href="https://miroox.github.io/blog/2016/12/CSFFileFormat/" target="_blank" rel="noopener">CSF文件格式(译自Modenc) - miRoox</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSF Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/post/784dd132/"/>
      <url>/post/784dd132/</url>
      
        <content type="html"><![CDATA[<h1 id="这个是拿来测试主题用的"><a class="markdownIt-Anchor" href="#这个是拿来测试主题用的"></a> 这个是拿来测试主题用的</h1><p>超链接 <a href="/">主页</a></p><p>引用</p><blockquote><p>引用测试</p></blockquote><p>单行代码块:aaa<code>aaa</code>aaaa<br />多行代码块</p><pre class="highlight"><code class="csharp"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">namespace</span> <span class="hljs-title">Program</span>{    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Class1</span>{        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 主方法</span>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-keyword">string</span>[] args</span>)</span>{            <span class="hljs-keyword">global</span>::System.Console.WriteLine(<span class="hljs-string">"Hello World!"</span>);        }    }}<span class="hljs-comment">// 注释</span></code></pre><p>表格</p><table><thead><tr><th>123</th><th style="text-align:center">456</th><th style="text-align:right">789</th></tr></thead><tbody><tr><td>1234</td><td style="text-align:center">5678</td><td style="text-align:right">9012</td></tr><tr><td>1234</td><td style="text-align:center">5678</td><td style="text-align:right">9012</td></tr><tr><td>1234</td><td style="text-align:center">5678</td><td style="text-align:right">9012</td></tr><tr><td>1234</td><td style="text-align:center">5678</td><td style="text-align:right">9012</td></tr><tr><td>1234</td><td style="text-align:center">5678</td><td style="text-align:right">9012</td></tr><tr><td>1234</td><td style="text-align:center">5678</td><td style="text-align:right">9012</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156/"/>
      <url>/post/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre class="highlight"><code class="bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre class="highlight"><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre class="highlight"><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre class="highlight"><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
